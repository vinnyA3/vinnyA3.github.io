{"version":3,"sources":["webpack:///./src/utils/helpers.js","webpack:///./src/components/window/components/CodeProp/index.js","webpack:///./src/components/window/components/CodeList/index.js","webpack:///./src/components/window/index.js","webpack:///./src/background-color-generator.js","webpack:///./src/pages/index.js"],"names":["typeFn","CodeProp","item","idx","indentLevel","itemClass","className","CodeList","children","intermediate","i","length","push","Fragment","key","style","paddingRight","generateCodePropList","items","startingIndex","map","CodeLink","text","url","href","target","contactData","Window","data","inline","isType","type","val","isNum","areAllNums","arr","every","bgColorGenerator","targetEl","startRGB","element","nodeType","Array","isArray","R","G","B","rgbMap","backgroundColor","currRGB","incDec","counter","bgInterval","setInterval","currVal","rgb","num","updateRGBVal","stop","clearInterval","console","error","DATA","IndexPage","useEffect","generator","document","body","height","width","display","justifyContent","alignItems","title"],"mappings":"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","file":"component---src-pages-index-js-3628d25cb62239a10609.js","sourcesContent":["// compose :: Fn -> Fn -> a\nexport const compose = (f, g) => x => f(g(x));\n\n// isType :: String -> a -> Bool\nexport const isType = type => val => typeof val === type;\n\n// isString :: a -> Bool\nexport const isString = isType('string');\n\n// isNum :: a -> Bool\nexport const isNum = isType('number');\n\n// isArray -> a -> Bool\nexport const isArray = val => Array.isArray(val);\n\n// isDOMElement -> DOMElement -> Bool\nexport const isDOMElement = element => element?.nodeType === 1\n\n// allOfType -> Fn -> Array[x] -> Bool\nexport const allOfType = typeFn => arr => arr.every(typeFn);\n\nexport const rand = (min, max) =>\n  Math.floor(Math.random() * (max - min + 1) + min);\n","import React from \"react\"\n\nconst CodeProp = ({ item, idx, indentLevel }) => {\n  let itemClass = \"code__item\"\n\n  if (indentLevel) {\n    itemClass += ` indent-level-${indentLevel}`\n  }\n\n  return (\n    <div className={itemClass}>\n      <span className=\"code__line-number\">{idx}</span>\n      <span className=\"code__prop\">{item[0]}</span>:\n      <span className=\"code__string\"> {`'${item[1]}'`}</span>,\n    </div>\n  )\n}\n\nexport default CodeProp\n","import React from \"react\"\n\nconst CodeList = ({ children }) => {\n  const intermediate = []\n\n  // TODO: use map\n  for (let i = 0; i < children.length; i++) {\n    intermediate.push(\n      <React.Fragment key={i}>\n        {children[i]}\n        {i < children.length - 1 ? (\n          <span style={{ paddingRight: \".25rem\" }}>,</span>\n        ) : null}\n      </React.Fragment>\n    )\n  }\n\n  return (\n    <div className=\"code__list-block inlined\">\n      <span>{\"[\"}</span>&nbsp;\n      {intermediate}\n      &nbsp;<span>{\"]\"}</span>\n    </div>\n  )\n}\n\nexport default CodeList\n","import React from \"react\"\nimport CodeProp from './components/CodeProp'\nimport CodeList from './components/CodeList'\nimport \"./styles.scss\"\n\nconst generateCodePropList = (\n  items,\n  indentLevel = null,\n  startingIndex = null\n) => {\n  return items.map((item, idx) => (\n    <CodeProp\n      key={idx}\n      item={item}\n      idx={startingIndex ? startingIndex + 1 : idx + 2}\n      indentLevel={indentLevel}\n    />\n  ))\n}\n\nconst CodeLink = ({ text, url }) => (\n  <div className=\"code__link\">\n    <a href={url ? url : \"#\"} target=\"__blank\">\n      {text}\n    </a>\n  </div>\n)\n\nconst contactData = [[\"email\", \"vincent.aceto@gmail.com\"]]\n\nconst Window = ({ data }) => {\n  return (\n    <div className=\"code\">\n      <code>\n        <div className=\"code__opening\">\n          <span className=\"code__line-number\">1</span>\n          <span className=\"code__keyword\">const</span>\n          <span className=\"code__variable\"> aboutMe</span> <span> = {\"{\"}</span>\n        </div>\n        <React.Fragment>{generateCodePropList(data)}</React.Fragment>\n\n        <div className=\"code__item\">\n          <span className=\"code__line-number\">{6}</span>\n          <span className=\"code__prop\">contact</span>:&nbsp;\n          <span>{\"{\"}</span>\n          <React.Fragment>\n            {generateCodePropList(contactData, 2, 6)}\n          </React.Fragment>\n        </div>\n\n        <div className=\"code__item indent-level-2\">\n          <span className=\"code__line-number\">{8}</span>\n          <span className=\"code__prop\">socials</span>:&nbsp;\n          <CodeList inline>\n            <CodeLink text=\"'github'\" url=\"https://github.com/vinnyA3\" />\n            <CodeLink text=\"'codepen'\" url=\"https://codepen.io/vinnyA3\" />\n            <CodeLink text=\"'linkedin'\" url=\"https://linkedin.com/in/vinaceto\" />\n          </CodeList>\n        </div>\n\n        <div className=\"code__opening\">\n          <span className=\"code__line-number\">9</span>\n          <span className=\"indent-level-2\">{\"}\"}</span>\n        </div>\n\n        <div className=\"code__opening\">\n          <span className=\"code__line-number\">10</span>\n          <span>{\"}\"}</span>\n        </div>\n      </code>\n    </div>\n  )\n}\n\nexport default Window\n","// Created by Vincent Aceto (vinnya3)\n// Licensed under MIT\n\nimport { isNum, isDOMElement, isArray, allOfType } from \"./utils/helpers\"\n\nconst areAllNums = allOfType(isNum)\n\nconst nextRGB = rgb =>\n  ({\n    R: \"G\",\n    B: \"R\",\n    G: \"B\",\n  }[rgb])\n\n/**\n * bgColorGenerator (curried) - sorry LOL\n *\n * @param {DOM Element} targetEl - DOM element whose background will be changing\n * @return {Function}\n *   @param {Array[Number]} startRGB - Array of RGB start values\n *\n * @example\n *\n *     bgColorGenerator('main')([193, 88, 88]);\n */\n\nconst bgColorGenerator = targetEl => startRGB => {\n  if (!isDOMElement(targetEl) || !isArray(startRGB)) {\n    return (\n      console.error(\n        'Argument(1) must be of type: \"DOM Element\".  Argument(2) must be of type: Array[Number]'\n      ),\n      void 0\n    )\n  } else if (!areAllNums(startRGB)) {\n    return console.error(\"Argument(2) must be composed of type: Number\"), void 0\n  }\n\n  const target = targetEl\n  const [R, G, B] = startRGB\n  const rgbMap = { R, G, B }\n\n  target.style.backgroundColor = `rgb(${R},${G},${B})`\n\n  const updateRGBVal = rgb =>\n    ({\n      R: num =>\n        (target.style.backgroundColor = `rgb(${num},${rgbMap.G},${rgbMap.B})`),\n      G: num =>\n        (target.style.backgroundColor = `rgb(${rgbMap.R},${num},${rgbMap.B})`),\n      B: num =>\n        (target.style.backgroundColor = `rgb(${rgbMap.R},${rgbMap.G},${num})`),\n    }[rgb])\n\n  let currRGB = \"B\"\n  let incDec = \"inc\"\n  let counter = 0\n\n  const bgInterval = setInterval(() => {\n    let currVal = rgbMap[currRGB]\n    if (counter === 105) {\n      counter = 0\n      currRGB = nextRGB(currRGB)\n      incDec = currVal === 88 ? \"inc\" : \"dec\"\n    }\n\n    counter++\n    updateRGBVal(currRGB)(\n      incDec === \"inc\" ? rgbMap[currRGB]++ : rgbMap[currRGB]--\n    )\n  }, 200)\n\n  return {\n    stop: () => clearInterval(bgInterval),\n  }\n}\n\nexport default bgColorGenerator\n","import React, { useEffect } from \"react\"\nimport SEO from \"../components/seo\"\nimport Window from \"../components/window\"\nimport bgColorGenerator from \"../background-color-generator\"\n\nconst DATA = [\n  [\"name\", \"Vincent Aceto\"],\n  [\"occupation\", \"Software Engineer\"],\n  [\"employer\", \"Major League Soccer\"],\n  [\"location\", \"New York, NY\"],\n]\n\nconst IndexPage = () => {\n  useEffect(() => {\n    const generator = bgColorGenerator(document.body)([193, 88, 88])\n\n    return () => {\n      generator.stop()\n    }\n  }, [])\n\n  return (\n    <div\n      style={{\n        height: \"100vh\",\n        width: \"100vw\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <SEO title=\"Home\" />\n      <Window data={DATA} />\n    </div>\n  )\n}\n\nexport default IndexPage\n"],"sourceRoot":""}